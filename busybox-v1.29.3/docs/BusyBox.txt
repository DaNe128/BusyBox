NAME
    BusyBox - The Swiss Army Knife of Embedded Linux

SYNTAX
     busybox <applet> [arguments...]  # or

     <applet> [arguments...]          # if symlinked

DESCRIPTION
    BusyBox combines tiny versions of many common UNIX utilities into a
    single small executable. It provides minimalist replacements for most of
    the utilities you usually find in GNU coreutils, util-linux, etc. The
    utilities in BusyBox generally have fewer options than their
    full-featured GNU cousins; however, the options that are included
    provide the expected functionality and behave very much like their GNU
    counterparts.

    BusyBox has been written with size-optimization and limited resources in
    mind. It is also extremely modular so you can easily include or exclude
    commands (or features) at compile time. This makes it easy to customize
    your embedded systems. To create a working system, just add /dev, /etc,
    and a Linux kernel. BusyBox provides a fairly complete POSIX environment
    for any small or embedded system.

    BusyBox is extremely configurable. This allows you to include only the
    components you need, thereby reducing binary size. Run 'make config' or
    'make menuconfig' to select the functionality that you wish to enable.
    Then run 'make' to compile BusyBox using your configuration.

    After the compile has finished, you should use 'make install' to install
    BusyBox. This will install the 'bin/busybox' binary, in the target
    directory specified by CONFIG_PREFIX. CONFIG_PREFIX can be set when
    configuring BusyBox, or you can specify an alternative location at
    install time (i.e., with a command line like 'make
    CONFIG_PREFIX=/tmp/foo install'). If you enabled any applet installation
    scheme (either as symlinks or hardlinks), these will also be installed
    in the location pointed to by CONFIG_PREFIX.

USAGE
    BusyBox is a multi-call binary. A multi-call binary is an executable
    program that performs the same job as more than one utility program.
    That means there is just a single BusyBox binary, but that single binary
    acts like a large number of utilities. This allows BusyBox to be smaller
    since all the built-in utility programs (we call them applets) can share
    code for many common operations.

    You can also invoke BusyBox by issuing a command as an argument on the
    command line. For example, entering

            /bin/busybox ls

    will also cause BusyBox to behave as 'ls'.

    Of course, adding '/bin/busybox' into every command would be painful. So
    most people will invoke BusyBox using links to the BusyBox binary.

    For example, entering

            ln -s /bin/busybox ls
            ./ls

    will cause BusyBox to behave as 'ls' (if the 'ls' command has been
    compiled into BusyBox). Generally speaking, you should never need to
    make all these links yourself, as the BusyBox build system will do this
    for you when you run the 'make install' command.

    If you invoke BusyBox with no arguments, it will provide you with a list
    of the applets that have been compiled into your BusyBox binary.

COMMON OPTIONS
    Most BusyBox applets support the --help argument to provide a terse
    runtime description of their behavior. If the
    CONFIG_FEATURE_VERBOSE_USAGE option has been enabled, more detailed
    usage information will also be available.

COMMANDS
    Currently available applets include:

            [, [[, cat, chgrp, chmod, chown, cp, cut, dd, du, ln, ls, md5sum,
            mkdir, mkfifo, mount, mountpoint, mv, readlink, rm, rmdir, sha1sum,
            sha256sum, sha3sum, sha512sum, test, touch, umount

COMMAND DESCRIPTIONS
    cat cat [FILE]...

        Print FILEs to stdout

    chgrp
        chgrp [-RhLHPcvf]... GROUP FILE...

        Change the group membership of each FILE to GROUP

                -R      Recurse
                -h      Affect symlinks instead of symlink targets
                -L      Traverse all symlinks to directories
                -H      Traverse symlinks on command line only
                -P      Don't traverse symlinks (default)
                -c      List changed files
                -v      Verbose
                -f      Hide errors

    chmod
        chmod [-Rcvf] MODE[,MODE]... FILE...

        Each MODE is one or more of the letters ugoa, one of the symbols +-=
        and one or more of the letters rwxst

                -R      Recurse
                -c      List changed files
                -v      List all files
                -f      Hide errors

    chown
        chown [-RhLHPcvf]... USER[:[GRP]] FILE...

        Change the owner and/or group of each FILE to USER and/or GRP

                -R      Recurse
                -h      Affect symlinks instead of symlink targets
                -L      Traverse all symlinks to directories
                -H      Traverse symlinks on command line only
                -P      Don't traverse symlinks (default)
                -c      List changed files
                -v      List all files
                -f      Hide errors

    cp  cp [OPTIONS] SOURCE... DEST

        Copy SOURCE(s) to DEST

                -a      Same as -dpR
                -R,-r   Recurse
                -d,-P   Preserve symlinks (default if -R)
                -L      Follow all symlinks
                -H      Follow symlinks on command line
                -p      Preserve file attributes if possible
                -f      Overwrite
                -i      Prompt before overwrite
                -l,-s   Create (sym)links
                -T      Treat DEST as a normal file
                -u      Copy only newer files

    cut cut [OPTIONS] [FILE]...

        Print selected fields from each input FILE to stdout

                -b LIST Output only bytes from LIST
                -c LIST Output only characters from LIST
                -d CHAR Use CHAR instead of tab as the field delimiter
                -s      Output only the lines containing delimiter
                -f N    Print only these fields
                -n      Ignored

    dd  dd [if=FILE] [of=FILE] [bs=N] [count=N] [skip=N] [seek=N]

        Copy a file with converting and formatting

                if=FILE         Read from FILE instead of stdin
                of=FILE         Write to FILE instead of stdout
                bs=N            Read and write N bytes at a time
                count=N         Copy only N input blocks
                skip=N          Skip N input blocks
                seek=N          Skip N output blocks

        N may be suffixed by c (1), w (2), b (512), kB (1000), k (1024), MB,
        M, GB, G

    du  du [-aHLdclsxhmk] [FILE]...

        Summarize disk space used for each FILE and/or directory

                -a      Show file sizes too
                -L      Follow all symlinks
                -H      Follow symlinks on command line
                -d N    Limit output to directories (and files with -a) of depth < N
                -c      Show grand total
                -l      Count sizes many times if hard linked
                -s      Display only a total for each argument
                -x      Skip directories on different filesystems
                -h      Sizes in human readable format (e.g., 1K 243M 2G)
                -m      Sizes in megabytes
                -k      Sizes in kilobytes (default)

    ln  ln [OPTIONS] TARGET... LINK|DIR

        Create a link LINK or DIR/TARGET to the specified TARGET(s)

                -s      Make symlinks instead of hardlinks
                -f      Remove existing destinations
                -n      Don't dereference symlinks - treat like normal file
                -b      Make a backup of the target (if exists) before link operation
                -S suf  Use suffix instead of ~ when making backup files
                -T      2nd arg must be a DIR
                -v      Verbose

    ls  ls [-1AaCxdLHRFplinshrSXvctu] [-w WIDTH] [FILE]...

        List directory contents

                -1      One column output
                -a      Include entries which start with .
                -A      Like -a, but exclude . and ..
                -x      List by lines
                -d      List directory entries instead of contents
                -L      Follow symlinks
                -H      Follow symlinks on command line
                -R      Recurse
                -p      Append / to dir entries
                -F      Append indicator (one of */=@|) to entries
                -l      Long listing format
                -i      List inode numbers
                -n      List numeric UIDs and GIDs instead of names
                -s      List allocated blocks
                -lc     List ctime
                -lu     List atime
                --full-time     List full date and time
                -h      Human readable sizes (1K 243M 2G)
                --group-directories-first
                -S      Sort by size
                -X      Sort by extension
                -v      Sort by version
                -t      Sort by mtime
                -tc     Sort by ctime
                -tu     Sort by atime
                -r      Reverse sort order
                -w N    Format N columns wide
                --color[={always,never,auto}]   Control coloring

    md5sum
        md5sum [FILE]...

        Print MD5 checksums

    mkdir
        mkdir [OPTIONS] DIRECTORY...

        Create DIRECTORY

                -m MODE Mode
                -p      No error if exists; make parent directories as needed

    mkfifo
        mkfifo [-m MODE] NAME

        Create named pipe

                -m MODE Mode (default a=rw)

    mount
        mount [OPTIONS] [-o OPT] DEVICE NODE

        Mount a filesystem. Filesystem autodetection requires /proc.

                -a              Mount all filesystems in fstab
                -f              Dry run
                -i              Don't run mount helper
                -v              Verbose
                -r              Read-only mount
                -t FSTYPE[,...] Filesystem type(s)
                -O OPT          Mount only filesystems with option OPT (-a only)
        -o OPT:
                loop            Ignored (loop devices are autodetected)
                [a]sync         Writes are [a]synchronous
                [no]atime       Disable/enable updates to inode access times
                [no]diratime    Disable/enable atime updates to directories
                [no]relatime    Disable/enable atime updates relative to modification time
                [no]dev         (Dis)allow use of special device files
                [no]exec        (Dis)allow use of executable files
                [no]suid        (Dis)allow set-user-id-root programs
                [r]shared       Convert [recursively] to a shared subtree
                [r]slave        Convert [recursively] to a slave subtree
                [r]private      Convert [recursively] to a private subtree
                [un]bindable    Make mount point [un]able to be bind mounted
                [r]bind         Bind a file or directory [recursively] to another location
                move            Relocate an existing mount point
                remount         Remount a mounted filesystem, changing flags
                ro              Same as -r

        There are filesystem-specific -o flags.

    mountpoint
        mountpoint [-q] <[-dn] DIR | -x DEVICE>

        Check if the directory is a mountpoint

                -q      Quiet
                -d      Print major/minor device number of the filesystem
                -n      Print device name of the filesystem
                -x      Print major/minor device number of the blockdevice

    mv  mv [-fin] SOURCE DEST or: mv [-fin] SOURCE... DIRECTORY

        Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY

                -f      Don't prompt before overwriting
                -i      Interactive, prompt before overwrite
                -n      Don't overwrite an existing file

    readlink
        readlink [-fnv] FILE

        Display the value of a symlink

                -f      Canonicalize by following all symlinks
                -n      Don't add newline
                -v      Verbose

    rm  rm [-irf] FILE...

        Remove (unlink) FILEs

                -i      Always prompt before removing
                -f      Never prompt
                -R,-r   Recurse

    rmdir
        rmdir [OPTIONS] DIRECTORY...

        Remove DIRECTORY if it is empty

                -p      Include parents
                --ignore-fail-on-non-empty

    sha1sum
        sha1sum [FILE]...

        Print SHA1 checksums

    sha256sum
        sha256sum [FILE]...

        Print SHA256 checksums

    sha3sum
        sha3sum [-a BITS] [FILE]...

        Print SHA3 checksums

    sha512sum
        sha512sum [FILE]...

        Print SHA512 checksums

    touch
        touch [-c] [-d DATE] [-t DATE] [-r FILE] FILE...

        Update the last-modified date on the given FILE[s]

                -c      Don't create files
                -d DT   Date/time to use
                -t DT   Date/time to use
                -r FILE Use FILE's date/time

    umount
        umount [OPTIONS] FILESYSTEM|DIRECTORY

        Unmount file systems

                -a      Unmount all file systems
                -r      Try to remount devices as read-only if mount is busy
                -l      Lazy umount (detach filesystem)
                -f      Force umount (i.e., unreachable NFS server)
                -d      Free loop device if it has been used
                -t FSTYPE[,...] Unmount only these filesystem type(s)

LIBC NSS
    GNU Libc (glibc) uses the Name Service Switch (NSS) to configure the
    behavior of the C library for the local environment, and to configure
    how it reads system data, such as passwords and group information. This
    is implemented using an /etc/nsswitch.conf configuration file, and using
    one or more of the /lib/libnss_* libraries. BusyBox tries to avoid using
    any libc calls that make use of NSS. Some applets however, such as login
    and su, will use libc functions that require NSS.

    If you enable CONFIG_USE_BB_PWD_GRP, BusyBox will use internal functions
    to directly access the /etc/passwd, /etc/group, and /etc/shadow files
    without using NSS. This may allow you to run your system without the
    need for installing any of the NSS configuration files and libraries.

    When used with glibc, the BusyBox 'networking' applets will similarly
    require that you install at least some of the glibc NSS stuff (in
    particular, /etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*,
    and /lib/libresolv*).

    Shameless Plug: As an alternative, one could use a C library such as
    uClibc. In addition to making your system significantly smaller, uClibc
    does not require the use of any NSS support files or libraries.

MAINTAINER
    Denis Vlasenko <vda.linux@googlemail.com>

AUTHORS
    The following people have contributed code to BusyBox whether they know
    it or not. If you have written code included in BusyBox, you should
    probably be listed here so you can obtain your bit of eternal glory. If
    you should be listed here, or the description of what you have done
    needs more detail, or is incorrect, please send in an update.

    Emanuele Aina <emanuele.aina@tiscali.it> run-parts

    Erik Andersen <andersen@codepoet.org>

        Tons of new stuff, major rewrite of most of the
        core apps, tons of new apps as noted in header files.
        Lots of tedious effort writing these boring docs that
        nobody is going to actually read.

    Laurence Anderson <l.d.anderson@warwick.ac.uk>

        rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm

    Jeff Angielski <jeff@theptrgroup.com>

        ftpput, ftpget

    Edward Betts <edward@debian.org>

        expr, hostid, logname, whoami

    John Beppu <beppu@codepoet.org>

        du, nslookup, sort

    Brian Candler <B.Candler@pobox.com>

        tiny-ls(ls)

    Randolph Chung <tausq@debian.org>

        fbset, ping, hostname

    Dave Cinege <dcinege@psychosis.com>

        more(v2), makedevs, dutmp, modularization, auto links file,
        various fixes, Linux Router Project maintenance

    Jordan Crouse <jordan@cosmicpenguin.net>

        ipcalc

    Magnus Damm <damm@opensource.se>

        tftp client insmod powerpc support

    Larry Doolittle <ldoolitt@recycle.lbl.gov>

        pristine source directory compilation, lots of patches and fixes.

    Glenn Engel <glenne@engel.org>

        httpd

    Gennady Feldman <gfeldman@gena01.com>

        Sysklogd (single threaded syslogd, IPC Circular buffer support,
        logread), various fixes.

    Karl M. Hegbloom <karlheg@debian.org>

        cp_mv.c, the test suite, various fixes to utility.c, &c.

    Daniel Jacobowitz <dan@debian.org>

        mktemp.c

    Matt Kraai <kraai@alumni.cmu.edu>

        documentation, bugfixes, test suite

    Stephan Linz <linz@li-pro.net>

        ipcalc, Red Hat equivalence

    John Lombardo <john@deltanet.com>

        tr

    Glenn McGrath <bug1@iinet.net.au>

        Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
        nameif, sed, patch, fold, install, uudecode.
        Various bugfixes, review and apply numerous patches.

    Manuel Novoa III <mjn3@codepoet.org>

        cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
        mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
        get_last_path_component, simplify_path, and a number trivial libbb routines

        also bug fixes, partial rewrites, and size optimizations in
        ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
        mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
        interface, dutmp, ifconfig, route

    Vladimir Oleynik <dzo@simtreas.ru>

        cmdedit; xargs(current), httpd(current);
        ports: ash, crond, fdisk, inetd, stty, traceroute, top;
        locale, various fixes
        and irreconcilable critic of everything not perfect.

    Bruce Perens <bruce@pixar.com>

        Original author of BusyBox in 1995, 1996. Some of his code can
        still be found hiding here and there...

    Tim Riker <Tim@Rikers.org>

        bug fixes, member of fan club

    Kent Robotti <robotti@metconnect.com>

        reset, tons and tons of bug reports and patches.

    Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>

        wget - Contributed by permission of Covad Communications

    Pavel Roskin <proski@gnu.org>

        Lots of bugs fixes and patches.

    Gyepi Sam <gyepi@praxis-sw.com>

        Remote logging feature for syslogd

    Linus Torvalds <torvalds@transmeta.com>

        mkswap, fsck.minix, mkfs.minix

    Mark Whitley <markw@codepoet.org>

        grep, sed, cut, xargs(previous),
        style-guide, new-applet-HOWTO, bug fixes, etc.

    Charles P. Wright <cpwright@villagenet.com>

        gzip, mini-netcat(nc)

    Enrique Zanardi <ezanardi@ull.es>

        tarcat (since removed), loadkmap, various fixes, Debian maintenance

    Tito Ragusa <farmatito@tiscali.it>

        devfsd and size optimizations in strings, openvt and deallocvt.

    Paul Fox <pgf@foxharp.boston.ma.us>

        vi editing mode for ash, various other patches/fixes

    Roberto A. Foglietta <me@roberto.foglietta.name>

        port: dnsd

    Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>

        misc

    Mike Frysinger <vapier@gentoo.org>

        initial e2fsprogs, printenv, setarch, sum, misc

    Jie Zhang <jie.zhang@analog.com>

        fixed two bugs in msh and hush (exitcode of killed processes)

